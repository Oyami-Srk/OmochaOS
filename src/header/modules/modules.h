#ifndef __MODULES_H__
#define __MODULES_H__

#include "kernel/type.h"
#include "kernel/process.h"
#include "kernel/asm.h"
#include "syscall.h"

#define INT_HANDLE_METHOD_DIRECT 0x0
#define INT_HANDLE_METHOD_CIRCULAR_BUFFER 0x1
#define INT_HANDLE_METHOD_FUNC 0x2
#define INT_HANDLE_METHOD_DISPATCH 0x3

extern int kprintf(const char *fmt, ...);

static inline uint register_to(uint irq, ushort method, uint data){
  message msg;
  msg.receiver = SYSTASK_PID;
  msg.type = SC_SET_IRQ_FUNC;
  msg.major_data = irq;
  msg.data.m1.d1 = data;
  msg.data.m1.d2 = method;
  send_msg(&msg);
  memset(&msg, 0, sizeof(message));
  recv_msg(&msg, SYSTASK_PID);
  if(msg.type == SC_DONE)
    return 0;
  else
    return 1;
}

static inline uint register_proc(char *name) {
  message msg;
  msg.receiver = SYSTASK_PID;
  msg.type = SC_REGISTER_PROC;
  strcpy(msg.data.m3, name);
  send_msg(&msg);
  memset(&msg, 0, sizeof(message));
  recv_msg(&msg, SYSTASK_PID);
  if(msg.type == SC_DONE)
    return 0;
  else
    return 1;
}

static inline uint find_proc(char *name){
  message msg;
  msg.receiver = SYSTASK_PID;
  msg.type = SC_QUERY_PROC;
  strcpy(msg.data.m3, name);
  send_msg(&msg);
  memset(&msg, 0, sizeof(message));
  recv_msg(&msg, SYSTASK_PID);
  if(msg.type == SC_DONE)
    return msg.major_data;
  else
    return 0;
}

// below is autogenerated code by python script
// {Insert Below}

// Module for manipulate monitor to display something
extern void Task_Monitor();
// Module for handling keyboard interrupt
extern void Task_KBD();
// TTY Process
extern void Task_TTY();
#define __MODULES_COUNT__ 3
#define __MODULES_DEFINES__ {(uint)Task_Monitor,(uint)Task_KBD,(uint)Task_TTY}

// {Insert Above}
// above is autogenerated code by python script

#endif
